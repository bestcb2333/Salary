package handler

import (
	"strconv"

	"github.com/McaxDev/Salary/config"
	"github.com/McaxDev/Salary/util"
	"github.com/gin-gonic/gin"
)

// 管理员用户查看工资阅读或招聘信息阅读的记录
func AdminLookup(c *gin.Context) {

	// 验证用户身份是否是管理员
	if _, admin, err := util.BindJwt(c); err != nil || !admin {
		util.Error(c, 400, "只有管理员才能进行此操作", err)
		return
	}

	// 根据查询字符串的参数构造查询条件
	query := DB.Model(new(config.SalaryRecord))
	var records any = make([]config.SalaryRecord, 0)
	if c.Request.URL.Path != "/allsalary" {
	} else if c.Request.URL.Path == "/recruitreader" {
		records = query.Model(new(config.RecruitReaded))
	} else {
		query = query.Table("salary_readed")
	}
	if name := c.Query("name"); name != "" {
		query = query.Where("username = ?", name)
	}
	if date := c.Query("date"); date != "" {
		query = query.Where("DATE(created_at) = ?", date)
	}

	if err := query.Error; err != nil {
		util.Error(c, 400, "查询条件格式有误", err)
		return
	}

	// 获取页码
	var totalrecords int64
	query.Count(&totalrecords)

	// 设置查询起始位置
	var offset int
	if pageStr := c.Query("page"); pageStr != "" {
		page, err := strconv.Atoi(pageStr)
		if err != nil {
			util.Error(c, 400, "你提供的页码不正确", err)
			return
		}
		offset = (page - 1) * 10
	}

	// 执行查询
	if err := query.Offset(offset).Limit(10).Find(&records).Error; err != nil {
		util.Error(c, 500, "查询失败，请联系管理员", err)
		return
	}
	c.AbortWithStatusJSON(200, gin.H{
		"msg":   "查询成功",
		"total": totalrecords,
		"data":  records,
	})
}
